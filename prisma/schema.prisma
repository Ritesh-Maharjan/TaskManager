// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  image          String?
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Project        Project[]
  ProjectMembers ProjectMembers[]
  Session        Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Project {
  id             String           @id @default(cuid())
  name           String
  OwnerId        User             @relation(fields: [userId], references: [id])
  userId         String
  ProjectMembers ProjectMembers[]
  Tasks          Tasks[]
  Invitation     Invitation[]

  @@unique([userId, name])
}

model Invitation {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  token     String
}

enum MemberRole {
  USER
  ADMIN
}

model ProjectMembers {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  role      MemberRole @default(USER)
  invitedAt DateTime   @default(now())
  joinedAt  DateTime   @updatedAt
  Tasks     Tasks[]
  userId    String
}

enum TaskStatus {
  ToDo
  Ongoing
  Completed
}

model Tasks {
  id               String          @id @default(cuid())
  title            String
  project          Project         @relation(fields: [projectId], references: [id])
  projectId        String
  status           TaskStatus      @default(ToDo)
  assignedTo       ProjectMembers? @relation(fields: [projectMembersId], references: [id])
  projectMembersId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([projectId, title])
}
